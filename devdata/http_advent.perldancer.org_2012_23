<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Dancer::Plugin::Adapter | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2012" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2012">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="dancer__plugin__adapter"></a>Dancer::Plugin::Adapter</h1>

<p>Today's article introduces David Golden's new plugin,
<a href="https://metacpan.org/module/Dancer::Plugin::Adapter">Dancer::Plugin::Adapter</a>, designed to provide a clean DSL keyword to obtain
a suitably configured instance of a class, in a similar way to, for example, the
<code>database</code> keyword from <a href="https://metacpan.org/module/Dancer::Plugin::Database">Dancer::Plugin::Database</a>.</p>
<p>The problem: you want to use some perl class in your Dancer app, but there's
no plugin for it.</p>
<p>The solution: as long as the class needs only static data to construct an
object, then <code>Dancer::Plugin::Adapter</code> can do the wrapping for you.  Think
of it as a "just-in-time" plugin (or maybe a poor-man's <a href="https://metacpan.org/module/Bread::Board">Bread::Board</a>).</p>
<p>Here's an example: you want to send emails via
<a href="http://postmarkapp.com">Postmark</a> using <a href="https://metacpan.org/module/WWW::Postmark">WWW::Postmark</a>.</p>
<p>In your config.yml, you put this:</p>
<pre class="prettyprint">plugins:
  Adapter:
    postmark:
      class: WWW::Postmark
      options: POSTMARK_API_TEST</pre>

<p>In your production config.yml, you can replace 'POSTMARK_API_TEST' with your
real Postmark API key.</p>
<p>Then, in your application, here's how you use it:</p>
<pre class="prettyprint">get '/' =&gt; sub {
  eval {
    service("postmark")-&gt;send(
      from    =&gt; 'me@domain.tld',
      to      =&gt; 'you@domain.tld, them@domain.tld',
      subject =&gt; 'an email message',
      body    =&gt; "hi guys, what's up?"
    );
  };
 
  return $@ ? "Error: $@" : "Mail sent";
};</pre>

<p><code>Dancer::Plugin::Adapter</code> takes care of constructing and caching the
<a href="https://metacpan.org/module/WWW::Postmark">WWW::Postmark</a> object based on the configuration data, and lets you access
the object with the <code>service()</code> function.</p>
<h1><a name="configuration"></a>CONFIGURATION</h1>

<p>One or more objects are defined by <code>NAME =&gt; HASHREF</code> pairs.  The hash
reference for each NAME must contain a 'class' key, whose value is the class
to wrap.</p>
<p>If the hash reference contains an 'options' key, its value will be dereferenced
(if it is a hash or array reference) and passed to <code>new()</code> when the object is
created.  Note that if the class requires a reference for the constructor,
you have to wrap it in an extra array.  E.g.</p>
<pre class="prettyprint"># config.yml:
plugins:
  Adapter:
    foo:
      class: Foo::Bar
      options:
        -
          wibble: wobble
          biff: boff
 
# constructor called as:
Foo::Bar-&gt;new( { wibble =&gt; wobble, biff =&gt; boff } );</pre>

<p>If the class does not use 'new' as the name of its constructor, an alternate
can be specified with the 'constructor' key.</p>
<pre class="prettyprint"># config.yml:
plugins:
  Adapter:
    tmpdir:
      class: File::Temp
      constructor: newdir
 
# constructor called as:
File::Temp-&gt;newdir()</pre>

<h1><a name="usage"></a>USAGE</h1>

<h2><a name="service"></a>service</h2>

<pre class="prettyprint">service($name);</pre>

<p>This function returns the object corresponding to the name defined in
the configuration file.  The object is created on demand and cached
for future use.</p>
<h1><a name="author"></a>AUTHOR</h1>

<p>David Golden (dagolden / xdg)</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
