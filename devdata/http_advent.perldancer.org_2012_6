<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> The Errors of Our Way | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2012" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2012">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="the_errors_of_our_way"></a>The Errors of Our Way</h1>

<p>This is a preview of the error throwing mechanism that is coming with 
<i>Dancer 2</i>. Things have been tidied a little bit, objectified in a classy
manner (or classified in an objectionable manner? Anyway, turned into nice
little <a href="https://metacpan.org/module/Moo">Moo</a> classes), and made (or so we hope) both easy to use and
pleasantly versatile.</p>
<h2><a name="at_the_core"></a>At the Core</h2>

<p>In <i>Dancer 2</i>, <code>Dancer::Core::Error</code> is the ringleader as far as error
handling is concerned. Its mission is fairly simple: take in booboos, and 
report on them in the most sensible way possible.</p>
<p>Within Dancer's code, creating a new error is done by, well, creating a new
<code>Dancer::Core::Error</code>:</p>
<pre class="prettyprint">my $oopsie = Dancer::Core::Error-&gt;new(
    status  =&gt; 418,
    message =&gt; "This is the Holidays. Tea not acceptable. We want eggnog.",
    context =&gt; $context,
);</pre>

<p>If that was not simple enough, all those attributes are actually optional. If
not given, the
status code defaults to a good old <i>500</i>, there is no need for
a message if we feel taciturn, and while the <i>$context</i> (which is a
<code>Dancer::Core::Context</code> object holding all the pieces of information
related to the current request) is needed if we want to take advantage of the
templates, we can also do without.</p>
<p>The important thing to know, however, is that creating an error doesn't mean
that it's automatically seen by the end-user. For that to happen, you have
to...</p>
<h2><a name="throw_it_around"></a>Throw It Around</h2>

<p>Or, put another way, we have to populate the <code>Dancer::Core::Response</code> object
with the error's data. That is done via</p>
<pre class="prettyprint">$oopsie-&gt;throw($response);</pre>

<p>Or, if we want to use the response object already present in the <i>$context</i>
(which is usually the case):</p>
<pre class="prettyprint">$oopsie-&gt;throw;</pre>

<p>This populates the status code of the response, sets its content, and throws a
<code>halt()</code> in the dispatch process.</p>
<h2><a name="what_the_error_going_to_look_like"></a>What The Error Going To Look Like?</h2>

<p>Quick answer: whatever you want it to. The error object has quite a few ways
to generate its content.</p>
<p>First, it can be explicitly given</p>
<pre class="prettyprint">my $oopsie = Dancer::Core::Error-&gt;new(
    content =&gt; '&lt;html&gt;&lt;body&gt;&lt;h1&gt;OMG&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;',
);</pre>

<p>but that's boring.</p>
<p>If the <i>$context</i> was given, the error will check if there's a template by
the name of the status code (so, say you're using Template Toolkit, <i>418.tt</i>)
and will use it to generate the content, passing it the error's <i>$message</i>,
<i>$status</i> code and  <i>$title</i> (which, if not specified, will be the standard http 
error definition for the status code).</p>
<p>If there is no template, the error will then look for a static page (to
continue with our example, <i>418.html</i>) in the
<code>public/</code> directory.</p>
<p>And finally, if all of that failed, the error object will fall back on an
internal template.</p>
<h2><a name="throwing_errors_in_routes"></a>Throwing Errors In Routes</h2>

<p>Now, how do we use all that stuff in our routes? In the simpliest way:</p>
<pre class="prettyprint">get '/xmas/gift/:gift' =&gt; sub {
    die "sorry, we're all out of ponies\n" 
        if param('gift') eq 'pony';
};</pre>

<p>The <code>die</code> will be intercepted by Dancer's inner magic, converted into an
error (status code <i>500</i>, message set to the dying words) and shoved into
the response.</p>
<p>In the cases where more control is required, <code>send_error()</code> is the way to go:</p>
<pre class="prettyprint">get '/glass/eggnog' =&gt; sub {
    send_error "Sorry, no eggnog here", 418;
};</pre>

<p>And if <i>total</i> control is needed:</p>
<pre class="prettyprint">get '/xmas/wishlist' =&gt; sub {
    Dancer::Core::Error-&gt;new(
        response =&gt; response(),
        status   =&gt; 406,
        message  =&gt; "nothing but coal for you, I'm afraid",
        template =&gt; 'naughty/index',
    )-&gt;throw unless user_was_nice();

    ...;
};</pre>

<h2><a name="in_conclusion"></a>In Conclusion</h2>

<p>At last news, <code>Dancer::Core::Error</code> is in a working state. Some of its
details are likely to change a little bit, but it's already nicely settling
into a pattern that should make everyone happy. Well, as happy as anybody can
be while errors are being thrown, anyway.</p>
<h2><a name="author"></a>AUTHOR</h2>

<p>Yanick Champoux (YANICK)</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
