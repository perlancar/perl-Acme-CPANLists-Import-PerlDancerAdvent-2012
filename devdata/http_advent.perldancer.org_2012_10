<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Dancecard | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2012" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2012">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="dancecard"></a>Dancecard</h1>

<p>It has been mentioned before that a web framework is nothing without its
ecosystem. Let's face it, <i>Dancer</i> just wouldn't be half as nice without all its plugins and interfaces
to template systems.  Likewise, 
web development with <i>Dancer</i> (or any other framework) would be much
more of a chore without all the nifty
JavaScript libraries out there. This is why <i>jQuery</i> comes pre-packaged with
<i>Dancer</i>: if the cast majority of projects will use it, it just makes sense
to have it already there.</p>
<p>But that about all the other JavaScript librabries that you're using? Wouldn't
be nice to keep a registry of them, and be able to quickly add them to any new
project? Yes it would. So let's take a few moments, and see if we can record
all those potential dance partners on a dance card...</p>
<h2><a name="building_the_registry"></a>Building the Registry</h2>

<p>First, we want our little utility to store the different projects are where to
get them. For this first iteration, let's assume that all those projects will
be plucked from Git repositories.</p>
<pre class="prettyprint">use Path::Class;
use File::HomeDir;
use Config::INI::Reader;

my $config_file = file( File::HomeDir-&gt;my_home, '.dancecard' );

add_repo(@ARGV);

sub add_repo {
    my( $url, $name ) = @_;
        
    unless ( $name ) {
        $name = $1 if $url =~ m#([^/]+?)(?:\.git)?$#;
    }

    open my $config_fh, '&gt;&gt;', $config_file-&gt;stringify;

    print $config_fh &lt;&lt;"END_REMOTE";
[$name]
    url = $url

END_REMOTE

    say "library '$name' added"
}</pre>

<p>Primitive, but for the moment it'll do.</p>
<h2><a name="adding_the_libraries_to_the_current_project"></a>Adding the Libraries to the Current Project</h2>

<p>Now, let's add the possibility to add any of those libraries to the current
project. Let's be fancy and let's do it through an interactive menu. Oh, and
let's show in green libraries that we can add, and in blue libraries that are
already present:</p>
<pre class="prettyprint">use Term::Prompt;
use Term::ANSIColor;

sub select_libs {
    $config_file-&gt;touch;
    my $config = Config::INI::Reader-&gt;read_file($config_file-&gt;stringify);

    die "no library added yet" unless %$config;

    die "no 'public/' directory found, are we in a Dancer project?\n"
        unless -d 'public';

    while ( 1 ) {
        my @menu_items = map {
            colored( $_, -d dir('public', $_ ) ? 'blue' : 'green' );
        } keys %$config;

        my @results = prompt( 'm', {
                prompt  =&gt; 'libraries to add',
                title   =&gt; "\ndev libaries",
                items   =&gt; \@menu_items,
                accept_empty_selection     =&gt; 1,
                accept_multiple_selections =&gt; 1,
            },
            'empty to exit',
            undef
        );

        last unless @results;

        for( (keys %$config)[@results] ) {
            copy_lib( $_ =&gt; $config-&gt;{$_} );
        }
    }
}

sub copy_lib {
    my( $name, $data ) = @_;

    require Git::Repository;

    say "\ncloning '$name'...";

    Git::Repository-&gt;run( clone =&gt; $data-&gt;{url}, "public/".$name );

    say 'done';
}</pre>

<h2><a name="putting_the__code_dancecard__code__together"></a>Putting the <code>dancecard</code> together</h2>

<p>And now, we put it all together:</p>
<pre class="prettyprint">#!/usr/bin/env perl

use 5.10.0;

use strict;
use warnings;

use Path::Class;
use Term::Prompt;
use Term::ANSIColor;
use File::HomeDir;
use Config::INI::Reader;

my $config_file = file( File::HomeDir-&gt;my_home, '.dancecard' );

if ( @ARGV ) {
    add_repo(@ARGV);
}
else {
    select_libs();
}

sub add_repo {
    my( $url, $name ) = @_;
        
    unless ( $name ) {
        $name = $1 if $url =~ m#([^/]+?)(?:\.git)?$#;
    }

    open my $config_fh, '&gt;&gt;', $config_file-&gt;stringify;

    print $config_fh &lt;&lt;"END_REMOTE";
[$name]
    url = $url

END_REMOTE

    say "library '$name' added"
}

sub select_libs {
    $config_file-&gt;touch;
    my $config = Config::INI::Reader-&gt;read_file($config_file-&gt;stringify);

    die "no library added yet" unless %$config;

    die "no 'public/' directory found, are we in a Dancer project?\n"
        unless -d 'public';

    while ( 1 ) {
        my @menu_items = map {
            colored( $_, -d dir('public', $_ ) ? 'blue' : 'green' );
        } keys %$config;

        my @results = prompt( 'm', {
                prompt                 =&gt; 'libraries to add',
                title                  =&gt; "\ndev libaries",
                items                  =&gt; \@menu_items,
                accept_empty_selection =&gt; 1,
                accept_multiple_selections =&gt; 1,
            },
            'empty to exit',
            undef
        );

        last unless @results;

        for( (keys %$config)[@results] ) {
            copy_lib( $_ =&gt; $config-&gt;{$_} );
        }
    }
}

sub copy_lib {
    my( $name, $data ) = @_;

    require Git::Repository;

    say "\ncloning '$name'...";

    Git::Repository-&gt;run( clone =&gt; $data-&gt;{url}, "public/".$name );

    say 'done';
}</pre>

<p>The result (without, alas, the full color display):</p>
<pre class="prettyprint">$ dancecard git://github.com/Seldaek/slippy.git
library 'slippy' added

$ dancecard git://github.com/twitter/bootstrap.git
library 'bootstrap' added

$ dancecard git://github.com/FortAwesome/Font-Awesome.git
library 'Font-Awesome' added

$ dancer -a myapp &amp;&amp; cd myapp

$ dancecard 

dev libaries
-------------
1) Font-Awesome 2) bootstrap    3) slippy       

libraries to add (empty to exit) 1

cloning 'Font-Awesome'...
done

dev libaries
-------------
1) *Font-Awesome* 2) bootstrap    3) slippy       

libraries to add (empty to exit) 2

cloning 'bootstrap'...
done

dev libaries
-------------
1) *Font-Awesome* 2) *bootstrap*    3) slippy       

libraries to add (empty to exit)</pre>

<h2><a name="conclusion"></a>Conclusion</h2>

<p>This little <code>dancecard</code> script is already a handy little thing. But it 
only scratches the surface of what could be
done: there could be an option to only download the latest version of a library
instead of the whole Git history, direct http links instead of git urls, ways
to group libraries together, a check that would update the current libraries to their latest
versions, etc. This, however, is feature creep that will have to wait
for another day...</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Yanick Champoux for the Perl
Dancer Advent Calendar 2012.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
