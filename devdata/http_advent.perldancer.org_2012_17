<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Create your own Dancer 2 DSL | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2012" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2012">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="create_your_own_dancer_2_dsl"></a>Create your own Dancer 2 DSL</h1>

<p>As the previous articles explained, Dancer 2 is a nice and shiny rewrite of
Dancer 1, with a lot of added benefits and strengths. One of them is that it's
properly object oriented, thanks to <a href="https://metacpan.org/module/Moo">Moo</a>.</p>
<p>Thanks to that redesign of the framework, Dancer's core elements are now objects,
roles, or some kind of light factories. That is also true for Dancer DSL, which
means that it can be extended or replaced altogether by one of your own!</p>
<p>But first, let's step back a bit.</p>
<h2><a name="dsl_what"></a>DSL-what?</h2>

<p>DSL means Domain-Specific Language (<a href="http://en.wikipedia.org/wiki/Domain-specific_language">see
wikipedia</a>). It's
basically what makes Dancer so easy to use. In our case it's a collection of
keywords, which allows the developer to tell to Dancer what to do.</p>
<p>Let's look at a bit of code:</p>
<pre class="prettyprint">prefix '/debug';

get '/display_env' =&gt; sub {
    to_dumper(request-&gt;env);
};

hook before =&gt; sub {
    dancer_app-&gt;environment ne 'development'
      and halt;
}</pre>

<p>The example above uses no less than 7 keywords! Dancer's
DSL is everywhere in a Dancer-powered application. If you actually wonder what
the DSL keywords are in this example, they are : <code>prefix</code>, <code>get</code>,
<code>to_dumper</code>, <code>request</code>, <code>hook</code>, <code>dancer_app</code> and <code>halt</code>.</p>
<p>So the idea is to extend or change Dancer DSL per web application, without
writing too much code. To be able to do that, let's look at what the default
Dancer's DSL is.</p>
<h2><a name="dsl_how_"></a>DSL-how ?</h2>

<p>How's the default DSL implemented? It very simply lies in the package <a href="https://metacpan.org/module/Dancer::Core::DSL">Dancer::Core::DSL</a>. You can look at the code <a href="https://github.com/PerlDancer/Dancer2/blob/master/lib/Dancer/Core/DSL.pm">here</a>.</p>
<p>But, basically, it's a Moo class consuming the <a href="https://metacpan.org/module/Dancer::Core::Role::DSL">Dancer::Core::Role::DSL</a>
role, and defining a list of keywords and their implementations. Keywords are
names, and the implementations are methods of the DSL class. The keywords can
be of two kinds, the ones that can be called anywhere, and the
ones that can be called only inside a route. The implementations make heavily
usage of the other Dancer's concept, like the app, settings, sessions,
settings, and so on.</p>
<h2><a name="extend_the_default_dsl"></a>Extend the default DSL</h2>

<p>So, what we want to do here is introduce new keywords for some fun. As an
example, we are going to translate some keywords in french. Namely:</p>
<ul>
<li><a name="item__code_get__code_"></a><b><code>get</code></b>
<p>will also be availabe as <code>prend</code></p>
</li>
<li><a name="item__code_post__code_"></a><b><code>post</code></b>
<p>will also be availabe as <code>envoie</code></p>
</li>
<li><a name="item__code_halt__code_"></a><b><code>halt</code></b>
<p>will also be availabe as <code>stop</code></p>
</li>
<li><a name="item__code_header__code_"></a><b><code>header</code></b>
<p>will also be availabe as <code>entete</code></p>
</li>
<li><a name="item__code_cookie__code_"></a><b><code>cookie</code></b>
<p>will also be availabe as <code>gateau</code></p>
</li>
</ul>
<p>Not very useful and not very christmas related, but it'll still do!</p>
<h2><a name="create_a_new_dsl"></a>Create a new DSL</h2>

<p>We can't just <b>extend</b> the default DSL, we need to create a <b>new</b> DSL module,
which will itself extend the default one. So, from what we have said and from
the source code of the core DSL, what we need is to create a new class
<code>FrenchDSL</code>, that extends <code>Dancer::Core::DSL</code>:</p>
<pre class="prettyprint">package MyDancerDSL;
   
use Moo;
   
extends 'Dancer::Core::DSL';</pre>

<p>Pretty easy, right? Now, let's see. We still want to benefit of all the
default keywords, but we want to add our translated ones. The keywords are
defined by the <code>dsl_keyword</code> method that returns them as an Array of Arrays. We
can use the <code>around</code> method modifier of Moo to add our keywords at the end:</p>
<pre class="prettyprint">around dsl_keywords =&gt; sub {
    my $orig = shift;
    my $keywords = $orig-&gt;(@_);
    
    push @$keywords, 
      [ gateau =&gt; 0 ],
      [ moteur =&gt; 1 ],
      [ stop =&gt; 0 ],
      [ prend =&gt;  1 ],
      [ envoie =&gt;  1 ],
      [ entete =&gt; 0 ];
    
    return $keywords;
};</pre>

<p>The 1's and 0's indicate if the keywords are global or can only be called from
within route code.</p>
<p>Third step: let's implement our new keywords. That's very easy because we are
just aliasing existing keywords:</p>
<pre class="prettyprint">sub gateau { goto &amp;Dancer::Core::DSL::cookie };
sub moteur { goto &amp;Dancer::Core::DSL::engine };
sub stop { goto &amp;Dancer::Core::DSL::halt };
sub prend { goto &amp;Dancer::Core::DSL::get };
sub envoie { goto &amp;Dancer::Core::DSL::post };
sub entete { goto &amp;Dancer::Core::DSL::header };

1;</pre>

<p>Pretty easy. Adding a final true value and save the whole in <i>FrenchDSL.pm</i> in a
place where it can be <code>use</code>'d.</p>
<h2><a name="use_your_new_dsl"></a>use your new DSL</h2>

<p>Now that we have a new Dancer DSL that extends the default one, how do we ask
to Dancer to use this one instead of the default one ? By specifying it at
<code>use</code> time, in our application script:</p>
<pre class="prettyprint">use strict;
use warnings;
    
use Dancer dsl =&gt; 'FrenchDSL';
    
envoie '/'  =&gt; sub {
    "That's the / route, you GET command!";
};
    
prend '/'  =&gt; sub {
    "A POST has been sent to / !";
};

dance;</pre>

<p>We are coming to the end of the article. We hope that you have discovered that
Dancer 2 allows easy and flexible extending, and that its guts are not that
complicated. The best advice would be: use Dancer 2 in new web developments,
and look at the code! it's not that big, and it's quite straightforward.</p>
<h1><a name="author"></a>AUTHOR</h1>

<p>Damien "dams" Krotkine</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
