<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Using DBIx::Class within a Dancer application | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2012" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2012">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="using_dbix__class_within_a_dancer_application"></a>Using DBIx::Class within a Dancer application</h1>

<p><code>DBIx::Class</code>, also known as <code>DBIC</code>, is one of the many Perl ORM 
(<i>Object Relational Mapper</i>), but it's commonly recognised as the best 
and most widely used.</p>
<p>This is a nice presentation from Leo :
<a href="http://www.slideshare.net/ranguard/dbixclass-beginners-presentation">http://www.slideshare.net/ranguard/dbixclass-beginners-presentation</a></p>
<p>Basically, <code>DBIC</code> allows you to interact with your SQL Database without writing any SQL.</p>
<p>To do that, you need a set of <b>Schema classes</b> that describes your database
structure. Then you can use DBIC to create, update, delete, search, and do many
more things on the data that are in your database.</p>
<p>From a Dancer web application, it is very easy to use DBIC, thanks to
<code>Dancer::Plugin::DBIC</code>. This article will implement a simple web application to
demonstrate the use of <code>Dancer::Plugin::DBIC</code>.</p>
<p><b>Note</b> : Although this article only skims the surface of <code>DBIX::Class</code>, it
won't explain how to use it. We recommend you to have a look at
<code>DBIx::Class::Manual::Intro</code> or <code>DBIx::Class::Manual::Example</code> if needed.</p>
<h2><a name="the_bookstore_example"></a>The bookstore example</h2>

<p>Let's consider a simple Dancer application that allows to search for authors or
books. The application is connected to a database, that contains authors, and
their books. The website will have one single page with a form, that allows to
query books or authors, and display the results.</p>
<p>To keep this article short, the HTML will be simplistic, and the implementation
as well. However, we'll try to explain how to properly use
<code>Dancer::Plugin::DBIC</code>.</p>
<p>The application will be structured as follow:</p>
<ul>
<li>
<p>a Dancer route <b>/search</b> to handle the request, and decide if there is any
search to perform, and send the results to the view</p>
</li>
<li>
<p>a view, that will display the search form, and the results if any.</p>
</li>
<li>
<p>a set of models, linked to a database, that will contain the books and authors.
These models will be created using DBIC</p>
</li>
</ul>
<h2><a name="the_basics"></a>The basics</h2>

<h3><a name="create_the_application"></a>Create the application</h3>

<p>Okay, that's easy enough:</p>
<pre class="prettyprint">$&gt; dancer -a bookstore</pre>

<h3><a name="change_template_type"></a>Change template type</h3>

<p>We'll want to loop on results and display authors and books, and it's easier to
use Template Toolkit to do that, rather than the default
<code>Dancer::Template::Simple</code>.</p>
<p>So let's specify in the configuration that we'll use Template Toolkit as
template engine:</p>
<pre class="prettyprint"># add in bookstore/config.yml
template: template_toolkit</pre>

<h3><a name="create_a_view"></a>Create a view</h3>

<p>We need a view to display the search form, and below, the results, if any. The
results will be fed by the route to the view as an <code>arrayref</code> of results.
Each result is a <i>hashref</i>, with a <code>author</code> key containing the name of the
author, and a <code>books</code> key containing an <i>arrayref</i> of strings : the books
names.</p>
<p>That explanation is probably hard to follow, so here is an example, much easier:</p>
<pre class="prettyprint"># example of a list of results
[ { author =&gt; 'author 1',
    books =&gt; [ 'book 1', 'book 2' ],
  },
  { author =&gt; 'author 2',
    books =&gt; [ 'book 3', 'book 4' ],
  }
]</pre>

<p>So, what will the view look like? Here is a simple example, displaying the
search form, and the results, if any. It's written in Template Toolkit, but
Dancer changes the default <code>[&#x2030; %]</code> format to be <code>&lt;% %&gt;</code> instead.</p>
<pre class="prettyprint"># bookstore/views/search.tt
&lt;p&gt;
&lt;form action="/search"&gt;
Search query: &lt;input type="text" name="query" /&gt;
&lt;/form&gt;
&lt;/p&gt;
&lt;br&gt;  
  
&lt;% IF query.length %&gt;
  &lt;p&gt;Search query was : &lt;% query %&gt;.&lt;/p&gt;
  &lt;% IF results.size %&gt;
    Results:
    &lt;ul&gt;
    &lt;% FOREACH result IN results %&gt;
      &lt;li&gt;Author: &lt;% result.author.replace("((?i)$query)", '&lt;b&gt;$1&lt;/b&gt;') %&gt;
      &lt;ul&gt;
      &lt;% FOREACH book IN result.books %&gt;
        &lt;li&gt;&lt;% book.replace("((?i)$query)", '&lt;b&gt;$1&lt;/b&gt;') %&gt;
      &lt;% END %&gt;
      &lt;/ul&gt;
    &lt;% END %&gt;
  &lt;% ELSE %&gt;
    No result
  &lt;% END %&gt;
&lt;% END %&gt;</pre>

<h3><a name="create_a_route"></a>Create a route</h3>

<p>Let's create a simple Dancer route, to be added in the <code>bookstore.pm</code> module:</p>
<pre class="prettyprint"># add in bookstore/lib/bookstore.pm
get '/search' =&gt; sub {
    my $query = params-&gt;{query};
    my @results = ();
    if (length $query) {
        @results = _perform_search($query);
    }
    template 'search', { query =&gt; $query,
                         results =&gt; \@results,
                       };
};</pre>

<p>It's rather simple: get the parameter called <i>query</i>, if it exists perform the
search, and in any case, call the <code>search</code> view.</p>
<p>So, as you can see, we need to write the <code>_perform_search()</code> method. But
before we do that, let's create the database.</p>
<h3><a name="create_a_database"></a>Create a database</h3>

<p>We'll go with SQLite, as it fits well with the aim of simplicity of this
example. Let's create the SQLite file database:</p>
<pre class="prettyprint">$&gt; sqlite3 bookstore.db
CREATE TABLE author( 
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 
  firstname text default '' not null, 
  lastname text not null);

CREATE TABLE book(
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 
  author INTEGER REFERENCES author (id), 
  title text default '' not null );</pre>

<p>Simple stuff: we have 2 tables, one for authors, and one for books, that points to the author table.</p>
<h3><a name="populate_with_some_data"></a>Populate with some data</h3>

<p>Let's write a script to populate the database with some data. We'll use
<code>DBIX::Class</code>, and let it discover our simple database schema.</p>
<pre class="prettyprint"># populate_database.pl
package My::Bookstore::Schema;
use base qw(DBIx::Class::Schema::Loader);
package main;
my $schema = My::Bookstore::Schema-&gt;connect('dbi:SQLite:dbname=bookstore.db');
$schema-&gt;populate('Author', [
  [ 'firstname', 'lastname'],
  [ 'Ian M.',    'Banks'   ],
  [ 'Richard',   'Matheson'],
  [ 'Frank',     'Herbert' ],
]);
my @books_list = (
  [ 'Consider Phlebas',    'Banks'    ],
  [ 'The Player of Games', 'Banks'    ],
  [ 'Use of Weapons',      'Banks'    ],
  [ 'Dune',                'Herbert'  ],
  [ 'Dune Messiah',        'Herbert'  ],
  [ 'Children of Dune',    'Herbert'  ],
  [ 'The Night Stalker',   'Matheson' ],
  [ 'The Night Strangler', 'Matheson' ],
);
# transform author names into ids
$_-&gt;[1] = $schema-&gt;resultset('Author')-&gt;find({ lastname =&gt; $_-&gt;[1] })-&gt;id
  foreach (@books_list);
$schema-&gt;populate('Book', [
  [ 'title', 'author' ],
  @books_list,
]);</pre>

<p>Then run it in the directory where <i>bookstore.db</i> sits:</p>
<pre class="prettyprint">perl populate_database.db</pre>

<p>And that's our database populated !</p>
<h2><a name="use_dancer__plugin__dbic"></a>Use Dancer::Plugin::DBIC</h2>

<p>Let's go back to our Dancer application now. Instead of interacting with the
database using SQL, let's configure <code>DBIX::Class</code>. DBIC needs to understand how
your data is organised in your database. There are two ways of letting DBIC
know:</p>
<ul>
<li>
<p>either by writing a set of Perl modules, called schema modules: they will
describe the database schema, each module describing one entity,</p>
</li>
<li>
<p>or by letting DBIC connect to the database, explore it, and generate the schema
itself.</p>
</li>
</ul>
<p>We'll demonstrate the use of the two solutions. The author of this article
(dams) is not a big fan of the detection method: on complex database, it
doesn't get everything right, so one needs to help DBIC. Describing the schema
manually in proper Perl classes seems a cleaner option. But hey, TIMTOWTDI.</p>
<h3><a name="use_auto_detection"></a>Use auto-detection</h3>

<p>Let's add some configuration in our Dancer application. We want to indicate
that we want to use the <code>Dancer::Plugin::DBIC</code> plugin, and how we want to use
it. We also want to define a new DBIC schema, that we will call <code>bookstore</code>.
And we need to indicate that this schema is connected to the SQLite database we
created.</p>
<pre class="prettyprint"># add in bookstore/config.yml
plugins:
  DBIC:
    bookstore:
      dsn:  "dbi:SQLite:dbname=bookstore.db"</pre>

<p>We could potentially define more schemas, by adding more fields under the <code>DBIC:</code> entry.</p>
<p><b>Note</b> : you've noticed that we have only described which database to link the
schema to. That way, we let <code>Dancer::Plugin::DBIC</code> connect to the database and
discover its schema, and make it available for us</p>
<p>Now that the configuration is done, let's see what needs to be done in the code.</p>
<p>First of all, we need to indicate to Dancer that we want to use
<code>Dancer::Plugin::DBIC</code>. That's easily done:</p>
<pre class="prettyprint"># add in bookstore/lib/bookstore.pm
use Dancer::Plugin::DBIC;</pre>

<p>And now we can implement <code>_perform_search</code> using <code>Dancer::Plugin::DBIC</code>. The
plugin gives you access to an additional keyword called <b>schema</b>, which you give the
name of schema you want to retrieve. It returns a
<code>DBIx::Class::Schema::Loader</code> (because we let the plugin discover the schema
for us). This returned object can then be used to get a resultset and perform
searches, as per standard usage of <code>DBIX::Class</code>.</p>
<pre class="prettyprint"># add in bookstore/lib/bookstore.pm
sub _perform_search {
    my ($query) = @_;
    my $bookstore_schema = schema 'bookstore';
    my @results;
    # search in authors
    my @authors = $bookstore_schema-&gt;resultset('Author')-&gt;search({
      -or =&gt; [
        firstname =&gt; { like =&gt; "%$query%" },
        lastname  =&gt; { like =&gt; "%$query%" },
      ]
    });
    push @results, map {
        { author =&gt; join(' ', $_-&gt;firstname, $_-&gt;lastname),
          books =&gt; [],
        }
    } @authors;
    my %book_results;
    # search in books
    my @books = $bookstore_schema-&gt;resultset('Book')-&gt;search({
        title =&gt; { like =&gt; "%$query%" },
    });
    foreach my $book (@books) {
        my $author_name = join(' ', $book-&gt;author-&gt;firstname, $book-&gt;author-&gt;lastname);
        push @{$book_results{$author_name}}, $book-&gt;title;
    }
    push @results, map {
        { author =&gt; $_,
          books =&gt; $book_results{$_},
        }
    } keys %book_results;
    return @results;
}</pre>

<p>We needed to do some data fiddling so that the books results are gathered by
authors.</p>
<h3><a name="use_home_made_schema_classes"></a>Use home-made schema classes</h3>

<p>Writing your own DBIC schema classes goes a bit beyond this article, but here
are the basics. You can either have the <code>.pm</code> files be generated from you
using <code>dbicdump</code> (see <code>DBIx::Class::Schema::Loader</code>), and then you can modify
them to fit your needs. Or you can write them yourself from scratch, as
explained in the DBIC documentation.</p>
<p>A third option is to use the nice <code>DBIx::Class::MooseColumns</code> that let's you
write the DBIC schema classes using <code>Moose</code>. This way of doing make it look
more like ActiveRecord declarations.</p>
<p>You should put your schema classes in a place that Dancer will find. A good
place is in <i>bookstore/lib/</i>.</p>
<p>Once your schema classes are in place, all you need to do is modify
<i>config.yml</i> to specify that you want to use them, instead of the default
auto-detection method:</p>
<pre class="prettyprint"># change in bookstore/config.yml
plugins:
  DBIC:
    bookstore:
      schema_class: My::Bookstore::Schema
      dsn: "dbi:SQLite:dbname=bookstore.db"</pre>

<p>The rest will work exactly the same.</p>
<h2><a name="start_the_application"></a>Start the application</h2>

<p>Our bookstore lookup application can now be started using the built-in server:</p>
<pre class="prettyprint"># start the web application
bookstore/bin/app.pl</pre>

<p>Now if we search for <code>The</code>, here is what we get :</p>
<img src="/images/dancer_dbic.png" />

<p>As you can see, the page presents 4 results. The first one is an author's
match, <i>Richard Ma<b>the</b>son</i>. The next 2 ones are 2 of his books. The last one
is <i><b>The</b> Player of Games</i> (a great book by the way...).</p>
<h2><a name="conclusion"></a>Conclusion</h2>

<p>Well that was a rather long article, but we wanted to show a real example of
using DBIC in Dancer. Most of the Dancer Plugins have the same spirit in
common: be as simple as possible, and don't get in the way of the user.
<code>Dancer::Plugin::DBIC</code> is exactly that, and we hope we demonstrated it to you.</p>
<h2><a name="author"></a>AUTHOR</h2>

<p>dams ( Damien Krotkine <code>&lt;dams@cpan.org&gt;</code> )</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
